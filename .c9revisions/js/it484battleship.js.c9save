{"ts":1351798682697,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1351798723814,"patch":[[{"diffs":[[1,"// IT484 Battleship implementation"]],"start1":0,"start2":0,"length1":0,"length2":34}]],"length":34,"saved":false}
{"ts":1351798759110,"patch":[[{"diffs":[[0,"entation"],[1,"\n\nfunction Ship()\n{\n    \n}"]],"start1":26,"start2":26,"length1":8,"length2":34}]],"length":60,"saved":false}
{"ts":1351798820449,"patch":[[{"diffs":[[0,"tation\n\n"],[1,"//the ship psudo class\n"],[0,"function"]],"start1":28,"start2":28,"length1":16,"length2":39},{"diffs":[[0,"{\n    \n}"],[1,"\n\n//the shot psudo class\nfunction Shot()\n{\n    \n}\n\n//the engine that will interface with the GUI and manage the logic of the game\nfunction Engine()\n{\n    \n}"]],"start1":75,"start2":75,"length1":8,"length2":164}]],"length":239,"saved":false}
{"ts":1351798855759,"patch":[[{"diffs":[[0,"ngine()\n{\n    \n}"],[1,"\n\n//initialization call to the engine to be executed after the script has loaded\nEngine();"]],"start1":223,"start2":223,"length1":16,"length2":106}]],"length":329,"saved":false}
{"ts":1351799028573,"patch":[[{"diffs":[[0,"ine()\n{\n    "],[1,"this.prototype.init = function()\n    {\n        \n    }"],[0,"\n}\n\n//initia"]],"start1":225,"start2":225,"length1":24,"length2":77}]],"length":382,"saved":false}
{"ts":1351799038467,"patch":[[{"diffs":[[0,"        "],[1,"//I am used to initialize the engine"],[0,"\n    }\n}"]],"start1":276,"start2":276,"length1":16,"length2":52}]],"length":418,"saved":false}
{"ts":1351799053914,"patch":[[{"diffs":[[0," loaded\n"],[1,"var engine = new "],[0,"Engine()"]],"start1":401,"start2":401,"length1":16,"length2":33},{"diffs":[[0,"ngine();"],[1,"\n"]],"start1":427,"start2":427,"length1":8,"length2":9}]],"length":436,"saved":false}
{"ts":1351799066495,"patch":[[{"diffs":[[0,"gine();\n"],[1,"engine.init();"]],"start1":428,"start2":428,"length1":8,"length2":22}]],"length":450,"saved":false}
{"ts":1351799098690,"patch":[[{"diffs":[[0,"\n\n//"],[-1,"initialization call to the engine to be executed after the script has loaded\nvar engine = new Engine();"],[1,"create the engine that will be used\nvar engine = new Engine();\n//make the call to initialize the engine"],[0,"\neng"]],"start1":328,"start2":328,"length1":111,"length2":111}]],"length":450,"saved":false}
{"ts":1351799183272,"patch":[[{"diffs":[[0," ship ps"],[1,"e"],[0,"udo clas"]],"start1":41,"start2":41,"length1":16,"length2":17},{"diffs":[[0,"ip pseudo class\n"],[-1,""],[0,"function Ship()\n"]],"start1":44,"start2":44,"length1":32,"length2":32},{"diffs":[[0," shot ps"],[1,"e"],[0,"udo clas"]],"start1":91,"start2":91,"length1":16,"length2":17},{"diffs":[[0,"ngine()\n"],[-1,""],[0,"{\n"],[1,"    //define init as a prototype of Engine so it isn't recreated each time an Engine object is created. This is good because the initialization code is entirely static.\n"],[0,"    this"]],"start1":225,"start2":225,"length1":18,"length2":187}]],"length":621,"saved":false}
{"ts":1351799204451,"patch":[[{"diffs":[[0,"Engine()"],[1,".init()"],[0,";\n//make"]],"start1":556,"start2":556,"length1":16,"length2":23}]],"length":628,"saved":false}
{"ts":1351799241524,"patch":[[{"diffs":[[0,")\n    {\n"],[1,"        var newEngine = new engine();\n"],[0,"        "]],"start1":439,"start2":439,"length1":16,"length2":54},{"diffs":[[0," be used"],[1," and initialize it."],[0,"\nvar eng"]],"start1":568,"start2":568,"length1":16,"length2":35},{"diffs":[[0,"ew E"],[-1,"ngine().init();\n//make the call to initialize the engine\ne"],[0,"ngine"],[1,"()"],[0,".ini"]],"start1":610,"start2":610,"length1":71,"length2":15}]],"length":629,"saved":false}
{"ts":1351799288657,"patch":[[{"diffs":[[0,"    "],[-1,"var newEngine = new engine();\n        //I am used to initialize"],[1,"//I am used to initialize the engine\n        var newEngine = new engine();\n        //Here I will check the local storage for previous game data and load it if found\n        \n        //finally I will return"],[0," the "],[1,"new "],[0,"engine\n"],[1,"        return newEngine;\n"],[0,"    "]],"start1":451,"start2":451,"length1":83,"length2":255}]],"length":801,"saved":false}
{"ts":1351799393600,"patch":[[{"diffs":[[0,")\n{\n    \n}\n\n"],[1,"function TurnData()\n{\n    \n}\n\n"],[0,"//the engine"]],"start1":124,"start2":124,"length1":24,"length2":54},{"diffs":[[0,"created."],[-1," "],[1,"\n    //"],[0,"This is "]],"start1":360,"start2":360,"length1":17,"length2":23},{"diffs":[[0,"static.\n"],[1,"    //The ideal way to initialize an engine is by calling new Engine().init() so as to initialize the engine with previous data. This acts a pseudo constructor for that purpose.\n"],[0,"    this"]],"start1":432,"start2":432,"length1":16,"length2":194},{"diffs":[[0,"f found\n"],[-1,""],[0,"        "],[1,"//TODO: Check local storage and initialize the engine appropriately"],[0,"\n       "]],"start1":826,"start2":826,"length1":24,"length2":91}]],"length":1082,"saved":false}
{"ts":1351799546492,"patch":[[{"diffs":[[0,"\n\n//the "],[-1,"ship "],[0,"pseudo c"]],"start1":34,"start2":34,"length1":21,"length2":16},{"diffs":[[0,"the pseudo class"],[1," that defines a ship on the grid."],[0,"\nfunction Ship()"]],"start1":38,"start2":38,"length1":32,"length2":65},{"diffs":[[0,"the "],[-1,"shot "],[0,"pseu"]],"start1":116,"start2":116,"length1":13,"length2":8},{"diffs":[[0,"lass"],[-1,"\nfunction Shot()\n{\n    \n}\n\nfunction TurnData()\n{\n    \n}\n\n//the engine that will interface with the GUI and manage the logic of the game\nfunction Engine()\n{"],[1," that defines a shot and how it will interact with the grids.\nfunction Shot()\n{\n    \n}\n\n//the pseudo class the represents the data to be returned when a turn is complete.\nfunction TurnData()\n{\n    \n}\n\n//the engine that will interface with the GUI and manage the logic of the game\nfunction Engine()\n{\n    //The grids to be used\n    //TODO: Add the grids\n    \n    //Watch value to represent who's turn it is\n    //TODO: implement a watch value\n    "],[0,"\n   "]],"start1":128,"start2":128,"length1":163,"length2":454}]],"length":1396,"saved":false}
{"ts":1351799603608,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    \n    this.fireShot = new Function(var x, var y, var shot)\n    {\n        \n    }\n"],[0,"}\n\n//cre"]],"start1":1295,"start2":1295,"length1":16,"length2":99}]],"length":1479,"saved":false}
{"ts":1351799619994,"patch":[[{"diffs":[[0,"ion("],[-1,"var x, var y, var"],[1,"x, y,"],[0," sho"]],"start1":1337,"start2":1337,"length1":25,"length2":13}]],"length":1467,"saved":false}
{"ts":1351799635561,"patch":[[{"diffs":[[0,"  \n    }"],[1,";"],[0,"\n}\n\n//cr"]],"start1":1365,"start2":1365,"length1":16,"length2":17}]],"length":1468,"saved":false}
{"ts":1351799684899,"patch":[[{"diffs":[[0,"   \n    "],[1,"this.fireShot = new Function(x, y, shot)\n    {\n        \n    };\n}\n\n"],[0,"//define"]],"start1":575,"start2":575,"length1":16,"length2":82},{"diffs":[[0,"se.\n    "],[-1,"this"],[1,"Engine"],[0,".prototy"]],"start1":994,"start2":994,"length1":20,"length2":22},{"diffs":[[0,"ne;\n"],[1,""],[0,"    }"],[-1,"\n    \n    this.fireShot = new Function(x, y, shot)\n    {\n        \n    };\n}"],[0,"\n\n//"]],"start1":1361,"start2":1361,"length1":87,"length2":13}]],"length":1462,"saved":false}
{"ts":1351799715752,"patch":[[{"diffs":[[0,"ion("],[-1,"x, y,"],[1,"var x, var y, var"],[0," sho"]],"start1":608,"start2":608,"length1":13,"length2":25},{"diffs":[[0,"reated.\n"],[-1,"    "],[0,"//This i"]],"start1":753,"start2":753,"length1":20,"length2":16},{"diffs":[[0,"static.\n"],[-1,"    "],[0,"//The id"]],"start1":820,"start2":820,"length1":20,"length2":16},{"diffs":[[0,"urpose.\n"],[-1,"    "],[0,"Engine.p"]],"start1":994,"start2":994,"length1":20,"length2":16},{"diffs":[[0,"ction()\n"],[-1,"    {\n    "],[1,"{\n"],[0,"    //I "]],"start1":1029,"start2":1029,"length1":26,"length2":18},{"diffs":[[0,"ine\n    "],[-1,"  "],[-1,"  "],[0,"var newE"]],"start1":1076,"start2":1076,"length1":20,"length2":16},{"diffs":[[0,"gine();\n"],[-1,"    "],[0,"    //He"]],"start1":1106,"start2":1106,"length1":20,"length2":16},{"diffs":[[0,"f found\n"],[-1,"    "],[0,"    //TO"]],"start1":1192,"start2":1192,"length1":20,"length2":16},{"diffs":[[0,"ely\n    "],[-1," "],[-1,"   "],[0,"//finall"]],"start1":1268,"start2":1268,"length1":20,"length2":16},{"diffs":[[0," engine\n"],[-1,"    "],[0,"    retu"]],"start1":1307,"start2":1307,"length1":20,"length2":16},{"diffs":[[0,"Engine;\n"],[-1,"    "],[0,"}\n\n//cre"]],"start1":1329,"start2":1329,"length1":20,"length2":16}]],"length":1430,"saved":false}
{"ts":1351799724066,"patch":[[{"diffs":[[0,"ion("],[-1,"var x, var y, var"],[1,"x, y,"],[0," sho"]],"start1":608,"start2":608,"length1":25,"length2":13}]],"length":1418,"saved":false}
{"ts":1351799772189,"patch":[[{"diffs":[[0,"reShot ="],[-1," new"],[0," Functio"]],"start1":590,"start2":590,"length1":20,"length2":16}]],"length":1414,"saved":false}
{"ts":1351799952588,"patch":[[{"diffs":[[0," value\n    \n"],[1,"    //this represents the logic behind firing a shot\n"],[0,"    this.fir"]],"start1":567,"start2":567,"length1":24,"length2":77},{"diffs":[[0,"t = "],[-1,"F"],[1,"f"],[0,"unct"]],"start1":648,"start2":648,"length1":9,"length2":9},{"diffs":[[0,"\n    };\n"],[1,"    \n    this.placeShip = function(startx,starty,endx,endy,ship)\n    {\n        \n    };\n"],[0,"}\n\n//def"]],"start1":687,"start2":687,"length1":16,"length2":103}]],"length":1554,"saved":false}
{"ts":1351800031998,"patch":[[{"diffs":[[0,"    };\n    \n"],[1,"    //this represents placing a ship on the player grid\n"],[0,"    this.pla"]],"start1":688,"start2":688,"length1":24,"length2":80},{"diffs":[[0,"\n    };\n"],[1,"    \n    //this represents the logic for returning the current player's shot history\n    this.getShotHistory = function()\n    {\n        \n    };\n    \n    this.getAvailableShots = function() {};\n"],[0,"}\n\n//def"]],"start1":830,"start2":830,"length1":16,"length2":209}]],"length":1803,"saved":false}
{"ts":1351800197958,"patch":[[{"diffs":[[0,"  //"],[-1,"this represents the logic behind firing a shot\n    this.fireShot = function(x, y, shot)\n    {\n        \n    };\n    \n    //this represents "],[1,"fire a shot at the opponent's ship grid\n    this.fireShot = function(x, y, shot) {};\n    \n    //"],[0,"plac"],[-1,"ing"],[1,"e"],[0," a s"]],"start1":581,"start2":581,"length1":152,"length2":109},{"diffs":[[0," on the "],[1,"current "],[0,"player"],[1,";s"],[0," grid\n  "]],"start1":693,"start2":693,"length1":22,"length2":32},{"diffs":[[0,"hip)"],[-1,"\n    {\n        \n    };\n    \n    //this represents the logic for returning"],[1," {};\n    \n    //return the shot history of"],[0," the"]],"start1":778,"start2":778,"length1":81,"length2":50},{"diffs":[[0,"ayer"],[-1,"'s shot h"],[1,"\n    this.getShotH"],[0,"istory"],[-1,"\n    this.getShotHistory"],[1," = function() {};\n    \n    //return the shot types that are available\n    this.getAvailableShots"],[0," = f"]],"start1":839,"start2":839,"length1":47,"length2":128},{"diffs":[[0,"on()"],[1," {};"],[0,"\n    "],[-1,"{"],[0,"\n    "],[-1,"    \n    };\n    \n    this.getAvailableShots = function() {};"],[1,"//What shots are on cooldown\n    this.getShotsOnCooldown = function() {};\n    \n    //Get Shot Grids\n    this.getShotGrids = function() {};\n    Get Ship Grid (For the active player)\n    Select Game Mode (int playerCount, bool modified)\n    Forfit (clear session)\n    Avaiable Ships"],[0,"\n}\n\n"]],"start1":972,"start2":972,"length1":79,"length2":302}]],"length":2043,"saved":false}
{"ts":1351800484508,"patch":[[{"diffs":[[0,"  //"],[-1,"What shots"],[1,"return the shot types that"],[0," are"]],"start1":988,"start2":988,"length1":18,"length2":34},{"diffs":[[0,"  //"],[-1,"Get S"],[1,"return the s"],[0,"hot "],[-1,"G"],[1,"g"],[0,"rids"]],"start1":1087,"start2":1087,"length1":18,"length2":25},{"diffs":[[0,"    "],[-1,"Get S"],[1,"\n    //return the s"],[0,"hip "],[-1,"G"],[1,"g"],[0,"rid "],[-1,"(F"],[1,"f"],[0,"or t"]],"start1":1152,"start2":1152,"length1":24,"length2":37},{"diffs":[[0,"ayer"],[-1,")"],[0,"\n    "],[-1,"Select Game Mode (int playerCount, bool modified)\n    Forfit (clear session)\n    "],[1,"this.getShipGrid = function() {};\n    \n    //clear the local storage and prepare the engine for a new game\n    this.forfit = function() {};\n    \n    //return a list of available ships\n    this.get"],[0,"Avai"],[1,"l"],[0,"able"],[-1," "],[0,"Ships"],[1," = function() {};"],[0,"\n}\n\n"]],"start1":1201,"start2":1201,"length1":109,"length2":240},{"diffs":[[0,"ngine;\n}"],[1,";\n\n//select the game mode and store in the local cache.\n//This should only be called from the front page when selecting the version of the game to run.\nEngine.prototype.selectGameMode = function(numberOfPlayers, modified)\n{\n    \n};"],[0,"\n\n//crea"]],"start1":2110,"start2":2110,"length1":16,"length2":247}]],"length":2441,"saved":false}
{"ts":1351800553694,"patch":[[{"diffs":[[0,"ne;\n};\n\n"],[1,"//prototype method used to load ships from a specified javascript file?\nEngine.prototype.loadShips = function(pathToShipsFile)\n{\n    \n};\n\n"],[0,"//select"]],"start1":2113,"start2":2113,"length1":16,"length2":154}]],"length":2579,"saved":false}
